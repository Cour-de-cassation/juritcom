import * as request from 'supertest'
import { HttpStatus, INestApplication } from '@nestjs/common'
import { Test, TestingModule } from '@nestjs/testing'
import { ListObjectsV2Command, S3Client } from '@aws-sdk/client-s3'
import { AwsClientStub, mockClient } from 'aws-sdk-client-mock'
import { AppModule } from '../../../app.module'
import { RequestLoggerInterceptor } from '../../interceptors/request-logger.interceptor'
import { LoggingInterceptor } from '../../interceptors/logging.interceptor'
import { BatchService } from '../../../../batch/batch.service'

process.env.S3_ARCHIVE_SCHEDULE = '0 */5 * * * *'

const batchService = {
  onModuleInit: jest.fn().mockImplementation(() => 'on init module'),
  addCronJob: jest.fn().mockImplementation(() => 'add cron job'),
  archiveFilesToS3: jest.fn().mockImplementation(() => 'move pdf from disk/volume to S3')
}

describe('HealthController', () => {
  let app: INestApplication
  const mockS3: AwsClientStub<S3Client> = mockClient(S3Client)
  const username = process.env.DOC_LOGIN
  const password = process.env.DOC_PASSWORD
  const basicAuth = Buffer.from(`${username}:${password}`).toString('base64')

  beforeAll(async () => {
    const moduleFixture: TestingModule = await Test.createTestingModule({
      imports: [AppModule]
    })
      .overrideProvider(BatchService)
      .useValue(batchService)
      .compile()

    // Disable logs for Integration tests
    app = moduleFixture.createNestApplication({ logger: false })
    app.useGlobalInterceptors(new RequestLoggerInterceptor(), new LoggingInterceptor())

    await app.init()
  })

  beforeEach(() => {
    mockS3.reset()
  })

  describe('GET /health', () => {
    it('returns a 200 OK with bucket status UP when bucket is available', async () => {
      // GIVEN
      mockS3.on(ListObjectsV2Command).resolves({})
      const expectedStatus = 'ok'
      const expectedBucketStatus = 'up'

      // WHEN
      const result = await request(app.getHttpServer())
        .get('/health')
        .set('Authorization', `Basic ${basicAuth}`)

      // THEN
      expect(result.statusCode).toEqual(HttpStatus.OK)
      expect(result.body.status).toEqual(expectedStatus)
      expect(result.body.info.bucket.status).toEqual(expectedBucketStatus)
    })

    it('returns a 503 SERVICE UNAVAILABLE with bucket status DOWN when bucket is unavailable', async () => {
      // GIVEN
      mockS3.on(ListObjectsV2Command).rejects(new Error('Some S3 error'))
      const expectedStatus = 'error'
      const expectedBucketStatus = 'down'

      // WHEN
      const result = await request(app.getHttpServer())
        .get('/health')
        .set('Authorization', `Basic ${basicAuth}`)

      // THEN
      expect(result.statusCode).toEqual(HttpStatus.SERVICE_UNAVAILABLE)
      expect(result.body.status).toEqual(expectedStatus)
      expect(result.body.error.bucket.status).toEqual(expectedBucketStatus)
    })
  })
})
